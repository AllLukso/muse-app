import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { authenticateAccount } from './authAPI';

export interface AuthState {
  value: any;
  user: string | null;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: AuthState = {
  value: 0,
  user: null,
  status: 'idle',
};

export const loginWithLukso = createAsyncThunk(
  'auth/loginWithLukso',
  async (account: string) => {
    await authenticateAccount(account);
  }
);

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUser: (state, action: PayloadAction<string | null>) => {
      state.user = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginWithLukso.pending, (state, action) => {
        state.status = 'loading';
      });
  },
});

export const { setUser } = authSlice.actions;
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const nonce = (state: RootState) => state.auth.value;
export const getUser = (state: RootState) => state.auth.user;

export default authSlice.reducer;
