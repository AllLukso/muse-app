import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { providers } from "ethers";
import { RootState } from "../../app/store";

import * as museService from "./museService";

export interface Board {
  title: string;
  description: string;
  address: string;
  id: string;
  metadata: string;
  tokens?: any[];
  owner: string;
}

interface Profile {
  name: string,
  description: string,
  followers: string,
  following: string
}

export interface MuseState {
  initialised: boolean;
  boardsContract: {
    address: string | null;
    created: boolean;
    updated: boolean;
  };
  profiles: Profile[];
  boards: Board[];
  status: "created" | "idle" | "loading" | "failed";
  newBoardModal: {
    open: boolean;
  };
  addToBoardModal: {
    tokenContract: string | null;
    tokenId: string | null;
    open: boolean;
  };
}

const initialState: MuseState = {
  initialised: false,
  boardsContract: {
    address: null,
    created: false,
    updated: false,
  },
  boards: [],
  profiles: [],
  status: "created",
  newBoardModal: {
    open: false,
  },
  addToBoardModal: {
    tokenContract: null,
    tokenId: null,
    open: false,
  },
};

export const loadMuse = createAsyncThunk(
  "muse/load",
  async ({ address, provider }: { address: string; provider: any }) => {
    console.log("loading muse");

    const inProgressAddress = localStorage.getItem("museboard_contract");

    const contractAddress = await museService.loadInitialState(
      address,
      provider
    );

    if (!contractAddress && !inProgressAddress) {
      return { address: contractAddress, created: false, updated: false };
    }

    if (!contractAddress && inProgressAddress) {
      return { address: inProgressAddress, created: true, updated: false };
    }

    return { address: contractAddress, created: true, updated: true };
  }
);

export const deployMuseboardsNFT = createAsyncThunk(
  "muse/deployMuseNFT",
  async ({
    address,
    provider,
  }: {
    address: string;
    provider: providers.Web3Provider;
  }) => {
    const contractAddress = await museService.deployBaseMuseContract(
      address,
      provider
    );

    return contractAddress;
  }
);

export const setMuseboardsNFT = createAsyncThunk(
  "muse/setMuseboardsNFT",
  async ({
    owner,
    address,
    provider,
  }: {
    owner: string;
    address: string;
    provider: providers.Web3Provider;
  }) => {
    const contractAddress = await museService.setMuseBoardsContractAddress(
      owner,
      address,
      provider
    );

    return contractAddress;
  }
);

export const loadBoardsForAddress = createAsyncThunk(
  "muse/loadBoardsForAddress",
  async ({
    address,
    provider,
  }: {
    address: string;
    provider: providers.Web3Provider;
  }) => {
    const boards = await museService.loadBoardsForAddress(address, provider);

    return boards;
  }
);

export interface AddToBoardPayload {
  boardsAddress: string;
  contractAddress: string;
  boardId: string;
  tokenId: string
  provider: providers.Web3Provider;
}
export const addTokenToBoard = createAsyncThunk(
  "muse/addTokenToBoard",
  async ({
    boardsAddress, 
    contractAddress,
    boardId,
    provider,
    tokenId
  }: AddToBoardPayload) => {
    try {
      return await museService.addTokenToBoard({
        boardsAddress, 
        contractAddress,
        boardId,
        provider,
        tokenId
      });
    } catch (error) {
      console.log(error);
    }
  }
);

export const museSlice = createSlice({
  name: "muse",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    openNewBoardModal: (state) => {
      state.newBoardModal.open = true;
    },
    closeNewBoardModal: (state) => {
      state.newBoardModal.open = false;
    },
    openAddToBoardModal: (
      state,
      action: PayloadAction<{ contract: string; id: string }>
    ) => {
      state.addToBoardModal.tokenContract = action.payload.contract;
      state.addToBoardModal.tokenId = action.payload.id;
      state.addToBoardModal.open = true;
    },
    closeAddToBoardModal: (state) => {
      state.addToBoardModal.open = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadMuse.pending, (state, action) => {
        state.status = "loading";
      })
      .addCase(loadMuse.fulfilled, (state, action) => {
        state.status = "idle";

        state.initialised = action.payload.created && action.payload.updated;
        state.boardsContract = {
          address: action.payload.address,
          created: action.payload.created,
          updated: action.payload.updated,
        };
      });

    builder
      .addCase(deployMuseboardsNFT.fulfilled, (state, action) => {
        if (action.payload) {
          state.initialised = true;
          state.boardsContract = {
            address: action.payload,
            created: true,
            updated: false,
          };

          localStorage.setItem("museboard_contract", action.payload);
        }
      });

    builder
      .addCase(loadBoardsForAddress.fulfilled, (state, action) => {
        const address = action.meta.arg.address;

        (action.payload as Board[]).forEach((board) => {
          const boardIdx = state.boards.findIndex(
            (_b) => _b.address === address && _b.id === board.id
          );

          if (boardIdx < 0) {
            state.boards.push(board);
          } else {
            state.boards[boardIdx] = board;
          }
        });
      });

    builder
      .addCase(addTokenToBoard.fulfilled, (state, action) => {
        state.addToBoardModal.open = false;
      });
  },
});

export const {
  openNewBoardModal,
  closeNewBoardModal,
  openAddToBoardModal,
  closeAddToBoardModal,
} = museSlice.actions;
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const newBoardModal = (state: RootState) => state.muse.newBoardModal;
export const addToBoardModal = (state: RootState) => state.muse.addToBoardModal;
export const getMuseState = (state: RootState) => state.muse;
export const getMuseBoard = (address: string, id: string) => (state: RootState) => {
  const board = state.muse.boards.find((board) => board.address === address && board.id === id);

  return board;
};

export default museSlice.reducer;
